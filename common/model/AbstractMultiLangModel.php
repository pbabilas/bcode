<?php
/**
 * @author: PaweÅ‚ Babilas
 * @date: 08.04.2015
 */

namespace app\common\model;

use app\common\interfaces\MultiLangModelInterface;
use app\module\language\models\Language;
use yii\db\ActiveRecord;
use yii\db\mssql\PDO;

abstract class AbstractMultiLangModel extends ActiveRecord implements MultiLangModelInterface
{
	private $fillEmptyFields = false;

	/**
	 * @param string $field
	 *
	 * @return mixed|void
	 */
	public function __get($field)
	{
		if (in_array($field, $this->getMultiLangFields()))
		{
			$language = \Yii::$app->language;

			$field = $this->buildMultilangFieldName($field, $language);
		}

		return parent::__get($field);
	}

	/**
	 * @param string $name
	 * @param bool $identical
	 *
	 * @return bool
	 */
	public function isAttributeChanged($name, $identical = true)
	{
		if (in_array($name, $this->getMultiLangFields()))
		{
			$language = \Yii::$app->language;

			$name = $this->buildMultilangFieldName($name, $language);
		}

		return parent::isAttributeChanged($name,$identical);
	}

	/**
	 * @return bool
	 */
	public function beforeValidate()
	{
		if ($this->fillEmptyFields)
		{
			$sql = "SELECT symbol FROM language";
			$langs = \Yii::$app->getDb()->createCommand($sql)->queryAll(PDO::FETCH_COLUMN);

			$defaultLang = Language::getDefault();

			unset( $langs[ array_search($defaultLang->symbol, $langs )] ); // now contains langs without defaultLang

			foreach ($this->getMultiLangFields() as $field)
			{
				$defaultField = $this->buildMultilangFieldName($field, $defaultLang->symbol);
				foreach ($langs as $lang)
				{
					$field = $this->buildMultilangFieldName($field, $lang);
					if ( ! $this->$field )
					{
						// copy value from default language to current one
						$this->$field = $this->$defaultField;
					}
				}
			}
		}
		return parent::beforeValidate(); // TODO: Change the autogenerated stub
	}

	/**
	 * @param string $name
	 * @param string $lang
	 *
	 * @return string
	 */
	private function buildMultilangFieldName($name, $lang)
	{
		return $name.'__'.$lang;
	}

	/**
	 * @return boolean
	 */
	protected function fillEmptyMultilangFields()
	{
		$this->fillEmptyFields = true;
	}


}